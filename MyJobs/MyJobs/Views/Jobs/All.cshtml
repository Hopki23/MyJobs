@using MyJobs.Core.Models.Job
@model JobsListViewModel
@{
    this.ViewData["Title"] = $"All Available Jobs, Page {Model.PageNumber}";
}

<h1 class='text-center'>@ViewData["Title"]</h1>
<br />

<div class="job-listing-area pt-120 pb-120">
    <div class="container">
        <div class="row">
            <div class="col-xl-3 col-lg-3 col-md-4">
                <div class="row">
                    <div class="col-12">
                        <h4 class='text-center'>Filter Jobs</h4>
                    </div>
                </div>
                <partial name="_FilterJobsPartial" />
            </div>
            <div id="jobListingSection" class="col-xl-9 col-lg-9 col-md-8">
                <section class="featured-job-area">
                    <div class="container">
                        @Html.AntiForgeryToken()
                        @foreach (var job in Model.Jobs)
                        {
                            <div class="single-job-items mb-30">
                                <div class="job-items">
                                    <div class="job-tittle job-tittle2">
                                        <h4>@job.Title</h4>
                                        <ul>
                                            <li>@job.CategoryName</li>
                                        </ul>
                                    </div>
                                </div>
                                <div class="items-link items-link2 f-right">
                                    <a asp-action="Details" asp-route-id="@job.Id">Details</a>
                                </div>
                            </div>
                        }
                    </div>
                </section>
            </div>
        </div>
    </div>
</div>

<nav id="paginationNav">
    <ul class="pagination justify-content-center">
        <li class="page-item @if(!Model.HasPreviousPage) {
        <text>disabled</text>
}">
            <a class="page-link" asp-action="All" asp-route-page="@Model.PreviousPageNumber">Previous</a>
        </li>
        @for (int i = Model.PageNumber - 3; i < Model.PageNumber; i++)
        {
            if (i > 0)
            {
                <li class="page-item"><a class="page-link" asp-action="All" asp-route-page="@i">@i</a></li>
            }
        }
        <li class="page-item active">
            <span class="page-link">
                @Model.PageNumber
                <span class="sr-only"></span>
            </span>
        </li>
        @for (int i = Model.PageNumber + 1; i <= Model.PageNumber + 3; i++)
        {
            if (i <= Model.PagesCount)
            {
                <li class="page-item"><a class="page-link" asp-action="All" asp-route-page="@i">@i</a></li>
            }
        }
        <li class="page-item @if(!Model.HasNextPage) {
        <text>disabled</text>
}">
            <a class="page-link" asp-action="All" asp-route-page="@Model.NextPageNumber">Next</a>
        </li>
    </ul>
</nav>

@section Scripts{
    <script>
        $(document).ready(function() {
            // Store the initial content of the job listing section (unfiltered job offers)
            var originalJobListing = $("#jobListingSection").html();

            // Retrieve the anti-forgery token value from the hidden input field
            var token = $('input[name="__RequestVerificationToken"]').val();

            $("#applyFiltersBtn").click(function() {
                // Retrieve the selected filter values (category, working times, location)
                var selectedCategory = $("#categorySelect").val();
                var selectedWorkingTimes = [];
                $("input[name='selectedWorkingTimes']:checked").each(function() {
                    selectedWorkingTimes.push($(this).val());
                });
                var selectedLocation = $("#locationSelect").val();

                // Check if all filters are empty (no filters applied)
                if (!selectedCategory && selectedWorkingTimes.length === 0 && !selectedLocation) {
                    // Restore the original job listing and display the pagination
                    $("#jobListingSection").html(originalJobListing);
                    document.getElementById("paginationNav").style.display = 'block';
                    return;
                }

                // Hide the pagination since filtering is applied
                document.getElementById("paginationNav").style.display = 'none';

                // AJAX Request
                $.ajax({
                    url: "/Jobs/Filter",
                    type: "POST",
                    headers: {
                        "RequestVerificationToken": token
                    },
                    // Data Sent to Server (filter values)
                    data: {
                        select: selectedCategory,
                        selectedWorkingTimes: selectedWorkingTimes,
                        locationSelect: selectedLocation
                    },
                    // AJAX Request Success Callback
                    success: function(data) {
                        // Update the job listing section with the filtered data
                        $("#jobListingSection").html(data);
                    },
                    error: function() {
                        console.log("Error occurred while filtering job offers.");
                    }
                });
            });
        });
    </script>
}